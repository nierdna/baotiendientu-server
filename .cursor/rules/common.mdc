Rule Name: common.mdc
Description: 
# Language Rules
- All code comments must be in English
- All system error messages must be in English
- Data returned from API/functions must be in English
- User communication should be in English

# Logging Rules
- All console logs must have clear annotations in the format:
  console.log(`[icon] [class_name] [function_name] [variable_name]:`, variable);
  
- Suggested icons:
  * üîç - Search/Query
  * ‚ö†Ô∏è - Warning
  * üî¥ - Error
  * ‚úÖ - Success
  * üîÑ - Processing

# Code Structure Rules
- Each functionality must be encapsulated in a separate function
- A function should not exceed 300 words
- Functions must have high reusability
- Each function should perform only one specific task
- Name variables/functions to clearly describe their purpose
- Adhere to SOLID and DRY principles:
  * SOLID:
    - S (Single Responsibility): Each class should have only one reason to change
    - O (Open/Closed): Extend classes without modifying existing code
    - L (Liskov Substitution): Child classes can replace parent classes
    - I (Interface Segregation): Multiple specialized interfaces are better than one large interface
    - D (Dependency Inversion): Depend on abstractions, not implementations
  * DRY (Don't Repeat Yourself): Avoid code duplication, write each logic only once

# API Response Format Rules
- All API responses must follow a common format structure
- Pagination responses must also adhere to the standard format
- Standard response format:
  ```json
  {
    "status_code": 200, // HTTP status code (snake_case)
    "message": "Success message", // Human-readable message
    "data": {}, // Actual response data (object, array, or primitive)
    "pagination": { // Optional, include only for paginated responses
      "page": 1,
      "limit": 10,
      "total_items": 100, // snake_case
      "total_pages": 10 // snake_case
    },
    "timestamp": "2023-06-15T10:30:00Z" // ISO timestamp of the response
  }
  ```
- Error responses must follow the same structure with appropriate status codes and error messages
- Never return raw data directly without following this structure

# API Key Naming Convention (SNAKE_CASE)
## Request & Response Keys
- **T·∫§T C·∫¢ key trong API ph·∫£i d√πng snake_case:**
  - ‚úÖ Correct: `user_id`, `created_at`, `updated_at`, `email`, `password`
  - ‚ùå Wrong: `userId`, `createdAt`, `updatedAt`, `userEmail`, `userPassword`

## Implementation
- **Response**: ƒê√£ c√≥ `SnakeCaseInterceptor` t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi to√†n b·ªô response sang snake_case
- **Request**: ƒê√£ c√≥ `SnakeCaseRequestPipe` t·ª± ƒë·ªông chuy·ªÉn ƒë·ªïi to√†n b·ªô request sang snake_case
- **DTO Properties**: ƒê·∫∑t t√™n property trong DTO theo snake_case (v√≠ d·ª•: `user_name`, `created_at`)

## Examples
```typescript
// ‚úÖ Correct DTO
export class CreateUserDto {
  @ApiProperty({ example: 'john_doe' })
  user_name: string; // snake_case

  @ApiProperty({ example: 'john@example.com' })
  email: string;

  @ApiProperty({ example: 'password123' })
  password: string;
}

// ‚úÖ Correct Response
{
  "id": "123",
  "user_name": "john_doe",
  "email": "john@example.com",
  "created_at": "2023-06-15T10:30:00Z",
  "updated_at": "2023-06-15T10:30:00Z"
}
```

# Error Handling Rules
- All data manipulation functions must have try/catch
- Log complete error information
- Return clear, understandable error messages to users

# Security Rules
- Do not store credentials in code
- Use environment variables for sensitive information
- Validate input data